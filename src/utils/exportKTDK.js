// ‚úÖ exportKTDK.js
import ExcelJS from "exceljs/dist/exceljs.min.js";
import { saveAs } from "file-saver";

/**
 * Xu·∫•t danh s√°ch ki·ªÉm tra ƒë·ªãnh k·ª≥ ra Excel (gi·∫•y ngang, √¥ t·ª± co gi√£n)
 * @param {Array} students - M·∫£ng h·ªçc sinh
 * @param {string} className - T√™n l·ªõp (v√≠ d·ª•: "4.1")
 * @param {string} term - H·ªçc k·ª≥ ("HK1" ho·∫∑c "HK2" ho·∫∑c "CN")
 */
export const exportKTDK = async (students, className, term = "HK1") => {
  if (!students || students.length === 0) {
    alert("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu h·ªçc sinh ƒë·ªÉ xu·∫•t!");
    return;
  }

  try {
    // üßæ T·∫°o workbook v√† worksheet
    const workbook = new ExcelJS.Workbook();
    const sheet = workbook.addWorksheet("KTƒêK", {
      pageSetup: {
        paperSize: 9, // A4
        orientation: "landscape", // ‚úÖ gi·∫•y ngang
        fitToPage: true,
        fitToWidth: 1,
        fitToHeight: 0,
        margins: {
          top: 0.5,
          bottom: 0.5,
          left: 0.5,
          right: 0.5,
          header: 0.3,
          footer: 0.3,
        },
      },
    });

    // üîπ Ti√™u ƒë·ªÅ tr∆∞·ªùng
    const schoolRow = sheet.addRow(["TR∆Ø·ªúNG TI·ªÇU H·ªåC B√åNH KH√ÅNH"]);
    schoolRow.font = { bold: true, size: 12 };
    sheet.mergeCells(`A1:H1`);
    schoolRow.alignment = { horizontal: "left" };

    // üîπ Ti√™u ƒë·ªÅ ch√≠nh
    const titleRow = sheet.addRow([`DANH S√ÅCH KI·ªÇM TRA ƒê·ªäNH K·ª≤ L·ªöP ${className}`]);
    titleRow.font = { bold: true, size: 14, color: { argb: "FF0D47A1" } };
    sheet.mergeCells(`A2:H2`);
    titleRow.alignment = { horizontal: "center", vertical: "middle" };
    titleRow.height = 25;

    // üîπ H·ªçc k·ª≥ & NƒÉm h·ªçc (v√≠ d·ª•: "H·ªçc k√¨ I ‚Äì NH: 2025-2026")
    const currentYear = new Date().getFullYear();
    const subRow = sheet.addRow([
      `H·ªçc k√¨ ${term === "HK1" ? "I" : term === "HK2" ? "II" : "C·∫£ nƒÉm"} ‚Äì NH: ${currentYear}-${currentYear + 1}`,
    ]);
    subRow.font = { italic: true, size: 12 };
    sheet.mergeCells(`A3:H3`);
    subRow.alignment = { horizontal: "center" };
    sheet.addRow([]);

    // üîπ Header
    const header = [
      "STT",
      "H·ªç v√† t√™n",
      "ƒêGTX",
      "L√≠ thuy·∫øt",
      "Th·ª±c h√†nh",
      "T·ªïng c·ªông",
      "M·ª©c ƒë·∫°t",
      "Nh·∫≠n x√©t",
    ];
    const headerRow = sheet.addRow(header);
    headerRow.font = { bold: true, color: { argb: "FFFFFFFF" } };
    headerRow.height = 22;
    headerRow.eachCell((cell) => {
      cell.fill = {
        type: "pattern",
        pattern: "solid",
        fgColor: { argb: "FF1976D2" },
      };
      cell.alignment = { horizontal: "center", vertical: "middle", wrapText: true };
      cell.border = {
        top: { style: "thin" },
        bottom: { style: "thin" },
        left: { style: "thin" },
        right: { style: "thin" },
      };
    });

    // üîπ Ghi d·ªØ li·ªáu h·ªçc sinh
    students.forEach((s, idx) => {
      const row = sheet.addRow([
        idx + 1,
        s.hoVaTen,
        s.dgtx || "",
        s.tracNghiem || "",
        s.thucHanh || "",
        s.tongCong || "",
        s.xepLoai || "",
        s.nhanXet || "",
      ]);

      row.eachCell((cell, col) => {
        cell.font = { size: 12 };
        cell.alignment = {
          vertical: "middle",
          horizontal: col === 2 || col === 8 ? "left" : "center",
          wrapText: true, // ‚úÖ t·ª± co gi√£n d√≤ng
          indent: col === 2 || col === 8 ? 1 : 0,
        };
        cell.border = {
          top: { style: "thin" },
          bottom: { style: "thin" },
          left: { style: "thin" },
          right: { style: "thin" },
        };
      });
    });

    // üîπ ƒê·ªô r·ªông c·ªôt
    sheet.columns = [
      { width: 6 },   // STT
      { width: 35 },  // H·ªç v√† t√™n
      { width: 10 },  // ƒêGTX
      { width: 11 },  // L√≠ thuy·∫øt
      { width: 11 },  // Th·ª±c h√†nh
      { width: 11 },  // T·ªïng c·ªông
      { width: 11 },  // M·ª©c ƒë·∫°t
      { width: 45 },  // Nh·∫≠n x√©t
    ];

    // üíæ Xu·∫•t file
    const buffer = await workbook.xlsx.writeBuffer();
    const blob = new Blob([buffer], {
      type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    });
    saveAs(blob, `KTƒêK_${className}_${term}.xlsx`);
  } catch (err) {
    console.error("‚ùå L·ªói khi xu·∫•t Excel:", err);
    alert("Xu·∫•t danh s√°ch KTƒêK th·∫•t b·∫°i!");
  }
};
