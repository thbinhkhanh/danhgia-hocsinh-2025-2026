import React, { useState, useEffect, useContext } from "react";
import {
  Box,
  Card,
  Typography,
  Divider,
  Stack,
  FormControl,
  Select,
  MenuItem,
  Checkbox,
  FormControlLabel,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Tooltip,
  TextField,
  useMediaQuery,
  InputLabel,
} from "@mui/material";

import { db } from "../firebase";
import { StudentContext } from "../context/StudentContext";
import { ConfigContext } from "../context/ConfigContext";
import { StudentDataContext } from "../context/StudentDataContext";
import { exportKTDK } from "../utils/exportKTDK";
import { printKTDK } from "../utils/printKTDK";

import { doc, getDoc, getDocs, collection, setDoc, writeBatch, deleteField } from "firebase/firestore";

import SaveIcon from "@mui/icons-material/Save";
import DownloadIcon from "@mui/icons-material/Download";
import RefreshIcon from "@mui/icons-material/Refresh";
import AssessmentIcon from "@mui/icons-material/Assessment";
import PrintIcon from "@mui/icons-material/Print";

import { exportEvaluationToExcelFromTable } from "../utils/exportExcelFromTable";
import { Snackbar, Alert } from "@mui/material";


export default function KiemTraDinhKi() {
  const { classData, setClassData } = useContext(StudentContext);
  const { config, setConfig } = useContext(ConfigContext);

  const [classes, setClasses] = useState([]);
  const [selectedClass, setSelectedClass] = useState("");
  const [students, setStudents] = useState([]);
  const { studentData, setStudentData } = useContext(StudentContext);

  const [isCongNghe, setIsCongNghe] = useState(false);
  const [selectedTerm, setSelectedTerm] = useState("HK1"); // m·∫∑c ƒë·ªãnh H·ªåC K√å I
  const { getStudentsForClass, setStudentsForClass } = useContext(StudentDataContext);

  const isMobile = useMediaQuery("(max-width: 768px)");
  const [isTeacherChecked, setIsTeacherChecked] = useState(false);


  useEffect(() => {
    if (config?.lop) setSelectedClass(config.lop);
  }, [config?.lop]);

  useEffect(() => {
    const fetchClasses = async () => {
      try {
        if (classData && classData.length > 0) {
          setClasses(classData);
          setSelectedClass((prev) => prev || classData[0]);
          return;
        }

        const snapshot = await getDocs(collection(db, "DANHSACH"));
        const classList = snapshot.docs.map((doc) => doc.id);
        setClassData(classList);
        setClasses(classList);
        if (classList.length > 0) setSelectedClass(classList[0]);
      } catch (err) {
        console.error("L·ªói l·∫•y danh s√°ch l·ªõp:", err);
        setClasses([]);
        setClassData([]);
      }
    };

    fetchClasses();
  }, [classData, setClassData]);

  const fetchStudentsAndStatus = async (cls) => {
    const currentClass = cls || selectedClass; // d√πng l·ªõp ƒë∆∞·ª£c truy·ªÅn n·∫øu c√≥
    if (!currentClass) return;

    const classKey = `${currentClass}${isCongNghe ? "_CN" : ""}_${selectedTerm}`;

    // 1Ô∏è‚É£ Ki·ªÉm tra context tr∆∞·ªõc
    const cached = getStudentsForClass(classKey);
    if (cached) {
      //console.log(`üü¢ L·∫•y d·ªØ li·ªáu h·ªçc sinh t·ª´ Context cho l·ªõp ${classKey}`);
      setStudents(cached);
      return;
    }

    try {
      //console.log(`üü° Ch∆∞a c√≥ trong Context, fetch t·ª´ Firestore cho l·ªõp ${classKey}`);

      // 2Ô∏è‚É£ L·∫•y danh s√°ch h·ªçc sinh t·ª´ DANHSACH
      const classDocRef = doc(db, "DANHSACH", currentClass);
      const classSnap = await getDoc(classDocRef);
      if (!classSnap.exists()) {
        //console.log(`‚ö™ Kh√¥ng c√≥ d·ªØ li·ªáu trong Firestore cho l·ªõp ${currentClass}`);
        setStudents([]);
        return;
      }

      const studentsData = classSnap.data();
      let studentList = Object.entries(studentsData).map(([maDinhDanh, info]) => ({
        maDinhDanh,
        hoVaTen: info.hoVaTen || "",
        tracNghiem: "",
        thucHanh: "",
        tongCong: "",
        xepLoai: "",
        nhanXet: "",
        dgtx: "",
        statusByWeek: {},
      }));

      // üîπ 2.5Ô∏è‚É£ L·∫•y d·ªØ li·ªáu ƒêGTX ri√™ng
      try {
        const dgtxDocRef = doc(db, "DGTX", classKey);
        const dgtxSnap = await getDoc(dgtxDocRef);
        if (dgtxSnap.exists()) {
          const dgtxData = dgtxSnap.data();
          studentList = studentList.map((s) => ({
            ...s,
            dgtx: dgtxData[s.maDinhDanh]?.dgtx ?? s.dgtx ?? "",
          }));
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi l·∫•y ƒêGTX:", err);
      }

      // 3Ô∏è‚É£ L·∫•y ƒëi·ªÉm t·ª´ BANGDIEM n·∫øu c√≥
      const termDoc = selectedTerm === "HK1" ? "HK1" : "CN";
      const scoreDocRef = doc(db, "BANGDIEM", termDoc);
      const scoreSnap = await getDoc(scoreDocRef);
      if (scoreSnap.exists()) {
        const scoreData = scoreSnap.data();
        const classScores = scoreData[classKey] || {};
        studentList = studentList.map((s) => ({
          ...s,
          tracNghiem: classScores[s.maDinhDanh]?.tracNghiem || "",
          thucHanh: classScores[s.maDinhDanh]?.thucHanh || "",
          tongCong: classScores[s.maDinhDanh]?.tongCong || "",
          xepLoai: classScores[s.maDinhDanh]?.xepLoai || "",
          nhanXet: classScores[s.maDinhDanh]?.nhanXet || "",
          dgtx: classScores[s.maDinhDanh]?.dgtx || s.dgtx || "",
        }));
      }

      // 4Ô∏è‚É£ S·∫Øp x·∫øp theo t√™n
      studentList.sort((a, b) => {
        const nameA = a.hoVaTen.trim().split(" ").slice(-1)[0].toLowerCase();
        const nameB = b.hoVaTen.trim().split(" ").slice(-1)[0].toLowerCase();
        return nameA.localeCompare(nameB);
      });
      studentList = studentList.map((s, idx) => ({ ...s, stt: idx + 1 }));

      // 5Ô∏è‚É£ C·∫≠p nh·∫≠t state v√† context
      setStudents(studentList);
      setStudentsForClass(classKey, studentList);
      //console.log(`üü¢ ƒê√£ l∆∞u d·ªØ li·ªáu h·ªçc sinh v√†o Context cho l·ªõp ${classKey}`);
    } catch (err) {
      console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu:", err);
      setStudents([]);
    }
  };

  useEffect(() => {
    fetchStudentsAndStatus();
    }, [selectedClass, selectedTerm, isCongNghe]);


    // H√†m nh·∫≠n x√©t ng·∫´u nhi√™n d·ª±a tr√™n x·∫øp lo·∫°i
// H√†m l·∫•y nh·∫≠n x√©t t·ª± ƒë·ªông theo x·∫øp lo·∫°i
const getNhanXetTuDong = (xepLoai) => {
  if (!xepLoai) return "";

  let loaiNhanXet;
  if (xepLoai === "T") loaiNhanXet = "tot";
  else if (xepLoai === "H") loaiNhanXet = "kha";
  else if (xepLoai === "C") loaiNhanXet = "trungbinh";
  else loaiNhanXet = "yeu"; // cho c√°c tr∆∞·ªùng h·ª£p kh√°c

  const arrNhanXet = nhanXetTheoMuc[loaiNhanXet];
  return arrNhanXet[Math.floor(Math.random() * arrNhanXet.length)];
};

// H√†m x·ª≠ l√Ω thay ƒë·ªïi √¥ b·∫£ng
const handleCellChange = (maDinhDanh, field, value) => {
  // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠p v√†o Tr·∫Øc nghi·ªám / Th·ª±c h√†nh
  if ((field === "tracNghiem" || field === "thucHanh") && value !== "") {
    const num = parseFloat(value);
    if (isNaN(num) || num < 0 || num > 5) return; // Ch·ªâ ch·∫•p nh·∫≠n s·ªë t·ª´ 0‚Äì5
  }

  setStudents(prev =>
    prev.map(s => {
      if (s.maDinhDanh === maDinhDanh) {
        const updated = { ...s, [field]: value };

        // ‚úÖ N·∫øu ch·ªânh Tr·∫Øc nghi·ªám ho·∫∑c Th·ª±c h√†nh
        if (field === "tracNghiem" || field === "thucHanh") {
          const tn = parseFloat(updated.tracNghiem) || 0;
          const th = parseFloat(updated.thucHanh) || 0;

          if (updated.tracNghiem !== "" && updated.thucHanh !== "") {
            const tong = tn + th;
            updated.tongCong = Math.round(tong); // L√†m tr√≤n tr∆∞·ªõc khi d√πng

            // ‚úÖ D·ª±a ho√†n to√†n v√†o gi√° tr·ªã ƒë√£ l√†m tr√≤n
            if (updated.tongCong === 8 && s.dgtx === "T") {
              updated.xepLoai = "T";
            } else if (updated.tongCong >= 9) {
              updated.xepLoai = "T";
            } else if (updated.tongCong >= 5) {
              updated.xepLoai = "H";
            } else {
              updated.xepLoai = "C";
            }

            // ‚úÖ C·∫≠p nh·∫≠t nh·∫≠n x√©t t·ª± ƒë·ªông
            updated.nhanXet = getNhanXetTuDong(updated.xepLoai);
          } else {
            updated.tongCong = "";
            updated.xepLoai = "";
            updated.nhanXet = "";
          }
        }

        // ‚úÖ N·∫øu ch·ªânh tr·ª±c ti·∫øp X·∫øp lo·∫°i
        if (field === "xepLoai") {
          updated.nhanXet = getNhanXetTuDong(updated.xepLoai);
        }

        return updated;
      }
      return s;
    })
  );
};

const [snackbar, setSnackbar] = useState({
  open: false,
  message: "",
  severity: "success", // "success" | "error" | "info" | "warning"
});


const handleSaveAll = async () => {
  if (!students || students.length === 0) return;

  // ‚úÖ Th√™m h·ªçc k√¨ v√†o classKey
  const classKey = `${selectedClass}${isCongNghe ? "_CN" : ""}_${selectedTerm}`;
  const termDoc = selectedTerm === "HK1" ? "HK1" : "CN";
  const docRef = doc(db, "BANGDIEM", termDoc);

  const batch = writeBatch(db);

  const studentsMap = {};
  students.forEach(s => {
    studentsMap[s.maDinhDanh] = {
        hoVaTen: s.hoVaTen,
        tracNghiem: s.tracNghiem !== "" ? Number(s.tracNghiem) : null,
        thucHanh: s.thucHanh !== "" ? Number(s.thucHanh) : null,
        tongCong: s.tongCong !== "" ? Number(s.tongCong) : null,
        xepLoai: s.xepLoai,
        nhanXet: s.nhanXet
    };
  });


  batch.set(docRef, { [classKey]: studentsMap }, { merge: true });

  try {
    await batch.commit();

    setStudentData(prev => ({
        ...prev,
        [classKey]: students
    }));

    setStudentsForClass(classKey, students);

    setSnackbar({
        open: true,
        //message: `‚úÖ ƒê√£ l∆∞u t·∫•t c·∫£ h·ªçc sinh l·ªõp ${classKey} v√†o ${termDoc}`,
        message: `‚úÖ L∆∞u th√†nh c√¥ng!`,
        severity: "success",
    });
    } catch (err) {
    console.error("‚ùå L·ªói l∆∞u d·ªØ li·ªáu h·ªçc sinh:", err);
    setSnackbar({
        open: true,
        message: "‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu h·ªçc sinh!",
        severity: "error",
    });
    }

};


 const handleDownload = async () => {
    try {
      await exportKTDK(students, selectedClass, selectedTerm);
    } catch (error) {
      console.error("‚ùå L·ªói khi xu·∫•t Excel:", error);
    }
  };


  const columns = ["tracNghiem", "thucHanh", "xepLoai", "nhanXet"];

const handleKeyNavigation = (e, rowIndex, col) => {
  const navigKeys = ["Enter", "ArrowDown", "ArrowUp", "ArrowRight", "ArrowLeft", "Tab"];
  if (!navigKeys.includes(e.key)) return; // cho ph√©p nh·∫≠p b√¨nh th∆∞·ªùng

  e.preventDefault();

  let nextRow = rowIndex;
  let nextCol = columns.indexOf(col);

  if (e.key === "Enter" || e.key === "ArrowDown") {
    nextRow = Math.min(students.length - 1, rowIndex + 1);
  } else if (e.key === "ArrowUp") {
    nextRow = Math.max(0, rowIndex - 1);
  } else if (e.key === "ArrowRight" || e.key === "Tab") {
    if (col === "tracNghiem") {
      nextCol = columns.indexOf("thucHanh");
    } else if (col === "thucHanh") {
      nextCol = columns.indexOf("tracNghiem");
      nextRow = Math.min(students.length - 1, rowIndex + 1);
    } else {
      // c√°c c·ªôt kh√°c: ƒëi theo c·ªôt b√¨nh th∆∞·ªùng
      nextCol = Math.min(columns.length - 1, nextCol + 1);
    }
  } else if (e.key === "ArrowLeft") {
    if (col === "thucHanh") nextCol = columns.indexOf("tracNghiem");
    else nextCol = Math.max(0, nextCol - 1);
  }

  const nextInput = document.getElementById(`${columns[nextCol]}-${nextRow}`);
  nextInput?.focus();
};

const nhanXetTheoMuc = {
    tot: [
      "Em c√≥ √Ω th·ª©c h·ªçc t·∫≠p t·ªët, thao t√°c th√†nh th·∫°o v√† t√≠ch c·ª±c trong c√°c ho·∫°t ƒë·ªông th·ª±c h√†nh Tin h·ªçc.",
      "Em ch·ªß ƒë·ªông, t·ª± tin, bi·∫øt v·∫≠n d·ª•ng CNTT v√†o h·ªçc t·∫≠p v√† ƒë·ªùi s·ªëng.",
      "Em h·ªçc t·∫≠p nghi√™m t√∫c, thao t√°c nhanh, n·∫Øm v·ªØng ki·∫øn th·ª©c Tin h·ªçc c∆° b·∫£n.",
      "Em th·ªÉ hi·ªán k·ªπ nƒÉng s·ª≠ d·ª•ng m√°y t√≠nh th√†nh th·∫°o, l√†m vi·ªác khoa h·ªçc v√† hi·ªáu qu·∫£.",
      "Em y√™u th√≠ch m√¥n Tin h·ªçc, ch·ªß ƒë·ªông kh√°m ph√° v√† h·ªó tr·ª£ b·∫°n b√® trong h·ªçc t·∫≠p.",
      "Em c√≥ kh·∫£ nƒÉng v·∫≠n d·ª•ng ki·∫øn th·ª©c v√†o gi·∫£i quy·∫øt t√¨nh hu·ªëng th·ª±c t·∫ø li√™n quan ƒë·∫øn CNTT.",
      "Em thao t√°c nhanh, ch√≠nh x√°c, s·ª≠ d·ª•ng ph·∫ßn m·ªÅm ƒë√∫ng quy tr√¨nh v√† s√°ng t·∫°o.",
      "Em c√≥ t∆∞ duy logic t·ªët, bi·∫øt tr√¨nh b√†y v√† l∆∞u tr·ªØ s·∫£n ph·∫©m h·ªçc t·∫≠p khoa h·ªçc.",
      "Em ti·∫øp thu nhanh, th·ª±c h√†nh thu·∫ßn th·ª•c, ho√†n th√†nh t·ªët c√°c nhi·ªám v·ª• h·ªçc t·∫≠p.",
      "Em th·ªÉ hi·ªán tinh th·∫ßn h·ª£p t√°c, chia s·∫ª v√† gi√∫p ƒë·ª° b·∫°n trong ho·∫°t ƒë·ªông nh√≥m."
    ],

    kha: [
      "Em c√≥ √Ω th·ª©c h·ªçc t·∫≠p t·ªët, bi·∫øt s·ª≠ d·ª•ng thi·∫øt b·ªã v√† ph·∫ßn m·ªÅm c∆° b·∫£n.",
      "Em ti·∫øp thu b√†i kh√°, c·∫ßn ch·ªß ƒë·ªông h∆°n trong vi·ªác th·ª±c h√†nh v√† v·∫≠n d·ª•ng ki·∫øn th·ª©c.",
      "Em l√†m b√†i c·∫©n th·∫≠n, c√≥ tinh th·∫ßn h·ªçc h·ªèi nh∆∞ng c·∫ßn r√®n luy·ªán th√™m thao t√°c th·ª±c h√†nh.",
      "Em n·∫Øm ƒë∆∞·ª£c ki·∫øn th·ª©c tr·ªçng t√¢m, th·ª±c hi·ªán thao t√°c t∆∞∆°ng ƒë·ªëi ch√≠nh x√°c.",
      "Em c√≥ kh·∫£ nƒÉng s·ª≠ d·ª•ng m√°y t√≠nh ·ªü m·ª©c kh√°, c·∫ßn luy·ªán t·∫≠p th√™m ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô thao t√°c.",
      "Em c√≥ tinh th·∫ßn h·ªçc t·∫≠p t√≠ch c·ª±c nh∆∞ng ƒë√¥i khi c√≤n thi·∫øu t·ª± tin khi th·ª±c h√†nh.",
      "Em ƒë√£ bi·∫øt √°p d·ª•ng ki·∫øn th·ª©c ƒë·ªÉ t·∫°o s·∫£n ph·∫©m h·ªçc t·∫≠p, c·∫ßn s√°ng t·∫°o h∆°n trong tr√¨nh b√†y.",
      "Em c√≥ ti·∫øn b·ªô r√µ, c·∫ßn ph√°t huy th√™m t√≠nh ch·ªß ƒë·ªông trong h·ªçc t·∫≠p Tin h·ªçc.",
      "Em bi·∫øt h·ª£p t√°c trong nh√≥m, ho√†n th√†nh nhi·ªám v·ª• ƒë∆∞·ª£c giao t∆∞∆°ng ƒë·ªëi t·ªët.",
      "Em th·ª±c h√†nh ƒë√∫ng h∆∞·ªõng d·∫´n, c·∫ßn n√¢ng cao h∆°n kh·∫£ nƒÉng v·∫≠n d·ª•ng v√†o t√¨nh hu·ªëng m·ªõi."
    ],

    trungbinh: [
      "Em ho√†n th√†nh c√°c y√™u c·∫ßu c∆° b·∫£n, c·∫ßn c·ªë g·∫Øng h∆°n khi th·ª±c h√†nh.",
      "Em c√≤n l√∫ng t√∫ng trong thao t√°c, c·∫ßn s·ª± h·ªó tr·ª£ th√™m t·ª´ gi√°o vi√™n.",
      "Em c√≥ ti·∫øn b·ªô nh∆∞ng c·∫ßn r√®n luy·ªán th√™m k·ªπ nƒÉng s·ª≠ d·ª•ng ph·∫ßn m·ªÅm.",
      "Em hi·ªÉu b√†i nh∆∞ng thao t√°c ch·∫≠m, c·∫ßn r√®n luy·ªán th√™m ƒë·ªÉ n√¢ng cao hi·ªáu qu·∫£.",
      "Em ƒë√¥i khi c√≤n qu√™n thao t√°c c∆° b·∫£n, c·∫ßn √¥n t·∫≠p th∆∞·ªùng xuy√™n h∆°n.",
      "Em ho√†n th√†nh nhi·ªám v·ª• h·ªçc t·∫≠p ·ªü m·ª©c trung b√¨nh, c·∫ßn ch·ªß ƒë·ªông h∆°n trong gi·ªù th·ª±c h√†nh.",
      "Em c√≥ th√°i ƒë·ªô h·ªçc t·∫≠p ƒë√∫ng ƒë·∫Øn nh∆∞ng c·∫ßn t·∫≠p trung h∆°n khi l√†m vi·ªác v·ªõi m√°y t√≠nh.",
      "Em n·∫Øm ƒë∆∞·ª£c m·ªôt ph·∫ßn ki·∫øn th·ª©c, c·∫ßn h·ªó tr·ª£ th√™m ƒë·ªÉ v·∫≠n d·ª•ng ch√≠nh x√°c.",
      "Em c√≥ c·ªë g·∫Øng, tuy nhi√™n c√≤n g·∫∑p kh√≥ khƒÉn khi l√†m b√†i th·ª±c h√†nh.",
      "Em c·∫ßn tƒÉng c∆∞·ªùng luy·ªán t·∫≠p ƒë·ªÉ c·∫£i thi·ªán k·ªπ nƒÉng v√† ƒë·ªô ch√≠nh x√°c khi thao t√°c."
    ],

    yeu: [
      "Em ch∆∞a n·∫Øm ch·∫Øc ki·∫øn th·ª©c, thao t√°c c√≤n ch·∫≠m, c·∫ßn ƒë∆∞·ª£c h∆∞·ªõng d·∫´n nhi·ªÅu h∆°n.",
      "Em c·∫ßn c·ªë g·∫Øng h∆°n trong h·ªçc t·∫≠p, ƒë·∫∑c bi·ªát l√† ph·∫ßn th·ª±c h√†nh Tin h·ªçc.",
      //"Em c·∫ßn tƒÉng c∆∞·ªùng luy·ªán t·∫≠p ƒë·ªÉ n·∫Øm v·ªØng ki·∫øn th·ª©c v√† thao t√°c m√°y t√≠nh.",
      "Em c√≤n g·∫∑p nhi·ªÅu kh√≥ khƒÉn khi s·ª≠ d·ª•ng ph·∫ßn m·ªÅm, c·∫ßn ƒë∆∞·ª£c h·ªó tr·ª£ th∆∞·ªùng xuy√™n.",
      "Em ch∆∞a ch·ªß ƒë·ªông trong h·ªçc t·∫≠p, c·∫ßn khuy·∫øn kh√≠ch v√† theo d√µi th√™m.",
      "Em thao t√°c thi·∫øu ch√≠nh x√°c, c·∫ßn r√®n luy·ªán th√™m k·ªπ nƒÉng c∆° b·∫£n.",
      "Em ti·∫øp thu ch·∫≠m, c·∫ßn s·ª± k√®m c·∫∑p s√°t sao ƒë·ªÉ ti·∫øn b·ªô h∆°n.",
      "Em c·∫ßn d√†nh nhi·ªÅu th·ªùi gian h∆°n cho vi·ªác luy·ªán t·∫≠p tr√™n m√°y t√≠nh.",
      "Em ch∆∞a ho√†n th√†nh ƒë∆∞·ª£c y√™u c·∫ßu b√†i h·ªçc, c·∫ßn h·ªó tr·ª£ t·ª´ gi√°o vi√™n v√† b·∫°n b√®.",
      "Em c·∫ßn ƒë∆∞·ª£c c·ªßng c·ªë l·∫°i ki·∫øn th·ª©c n·ªÅn t·∫£ng v√† h∆∞·ªõng d·∫´n th·ª±c h√†nh c·ª• th·ªÉ h∆°n."
    ]
  };

  const handlePrint = async () => {
    if (!selectedClass) {
      alert("Vui l√≤ng ch·ªçn l·ªõp tr∆∞·ªõc khi in!");
      return;
    }
    try {
      // g·ªçi h√†m in, truy·ªÅn class v√† h·ªçc k·ª≥ hi·ªán t·∫°i
      await inKTDK(selectedClass, selectedTerm);
    } catch (err) {
      console.error("‚ùå L·ªói khi in:", err);
      alert("L·ªói khi in danh s√°ch. Vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  return (
    <Box sx={{ minHeight: "100vh", backgroundColor: "#e3f2fd", pt: 3 }}>
      <Card
        elevation={6}
        sx={{
          p: 4,
          borderRadius: 3,
          maxWidth: 1300,
          mx: "auto",
          position: "relative"
        }}
      >
        {/* üü© N√∫t L∆∞u, T·∫£i Excel, L√†m m·ªõi v√† ƒê√°nh gi√° */}
        <Box sx={{ position: "absolute", top: 12, left: 12, display: "flex", gap: 1 }}>
          {/* N√∫t L∆∞u */}
          <Tooltip title="L∆∞u d·ªØ li·ªáu" arrow>
            <IconButton
              onClick={handleSaveAll}
              sx={{
                color: "primary.main",
                bgcolor: "white",
                boxShadow: 2,
                "&:hover": { bgcolor: "primary.light", color: "white" }
              }}
            >
              <SaveIcon fontSize="small" />
            </IconButton>
          </Tooltip>

          {/* N√∫t T·∫£i xu·ªëng Excel */}
          <Tooltip title="T·∫£i xu·ªëng Excel" arrow>
            <IconButton
              onClick={handleDownload}
              sx={{
                color: "primary.main",
                bgcolor: "white",
                boxShadow: 2,
                "&:hover": { bgcolor: "primary.light", color: "white" }
              }}
            >
              <DownloadIcon fontSize="small" />
            </IconButton>
          </Tooltip>

          <Tooltip title="In danh s√°ch KTƒêK" arrow>
            <IconButton
              onClick={() => printKTDK(students, selectedClass, selectedTerm)}
              sx={{
                color: "primary.main",
                bgcolor: "white",
                boxShadow: 2,
                "&:hover": { bgcolor: "primary.light", color: "white" },
              }}
            >
              <PrintIcon fontSize="small" />
            </IconButton>
          </Tooltip>

        </Box>

        {/* üü¶ √î ch·ªçn h·ªçc k·ª≥ (desktop: g√≥c tr√™n ph·∫£i, mobile: d∆∞·ªõi ti√™u ƒë·ªÅ) */}
{!isMobile && (
  <Box
    sx={{
      position: "absolute",
      top: 12,
      right: 12
    }}
  >
    <FormControl size="small" sx={{ minWidth: 120 }}>
      <Select
        value={selectedTerm}
        onChange={(e) => setSelectedTerm(e.target.value)}
        size="small"
      >
        <MenuItem value="HK1">H·ªçc k√¨ I</MenuItem>
        <MenuItem value="ALL">C·∫£ nƒÉm</MenuItem>
      </Select>
    </FormControl>
  </Box>
)}

{/* üü® Ti√™u ƒë·ªÅ */}
<Typography
  variant="h5"
  fontWeight="bold"
  color="primary"
  gutterBottom
  sx={{ textAlign: "center", mb: 2 }}
>
  NH·∫¨P ƒêI·ªÇM KTƒêK
</Typography>

{/* Ch·ªâ hi·ªÉn th·ªã ch·ªçn h·ªçc k·ª≥ d∆∞·ªõi ti√™u ƒë·ªÅ n·∫øu tr√™n mobile */}
{isMobile && (
  <Box sx={{ display: "flex", justifyContent: "center", mb: 2 }}>
    <FormControl size="small" sx={{ minWidth: 120 }}>
      <Select
        value={selectedTerm}
        onChange={(e) => setSelectedTerm(e.target.value)}
        size="small"
      >
        <MenuItem value="HK1">H·ªçc k√¨ I</MenuItem>
        <MenuItem value="ALL">C·∫£ nƒÉm</MenuItem>
      </Select>
    </FormControl>
  </Box>
)}

{/* üü© Stack l·ªõp ‚Äì m√¥n ‚Äì checkbox */}
<Stack
  direction="row"
  spacing={2}
  justifyContent="center"
  alignItems="center"
  flexWrap="wrap"
  mb={3}
>
  {/* L·ªõp */}
  <FormControl size="small" sx={{ minWidth: 80 }}>
    <InputLabel id="lop-label">L·ªõp</InputLabel>
    <Select
      labelId="lop-label"
      value={selectedClass}
      label="L·ªõp"
      onChange={async (e) => {
        const newClass = e.target.value;

        // 1Ô∏è‚É£ C·∫≠p nh·∫≠t state ngay (Dropdown s·∫Ω t·ª± ƒë√≥ng)
        setSelectedClass(newClass);
        setConfig(prev => ({ ...prev, lop: newClass }));

        // 2Ô∏è‚É£ Reset danh s√°ch c≈©
        setStudents([]);

        // 3Ô∏è‚É£ Hi·ªÉn th·ªã loading ng·∫Øn (tu·ª≥ ch·ªçn)
        setLoadingMessage("ƒêang t·∫£i d·ªØ li·ªáu l·ªõp m·ªõi...");
        setLoadingProgress(0);

        // 4Ô∏è‚É£ Fetch d·ªØ li·ªáu m·ªõi ngay sau khi state ƒë∆∞·ª£c set
        await fetchStudentsAndStatus(newClass); // truy·ªÅn class m·ªõi
      }}
    >
      {classes.map(cls => (
        <MenuItem key={cls} value={cls}>
          {cls}
        </MenuItem>
      ))}
    </Select>
  </FormControl>

  {/* M√¥n h·ªçc */}
  <FormControl size="small" sx={{ minWidth: 120 }}>
    <InputLabel id="monhoc-label">M√¥n h·ªçc</InputLabel>
    <Select
      labelId="monhoc-label"
      value={isCongNghe ? "congnghe" : "tinhoc"}
      label="M√¥n h·ªçc"
      onChange={async (e) => {
        const value = e.target.value;
        const isCN = value === "congnghe";
        try {
          const docRef = doc(db, "CONFIG", "config");
          await setDoc(docRef, { congnghe: isCN }, { merge: true });
          setConfig((prev) => ({ ...prev, congnghe: isCN }));
          setIsCongNghe(isCN);
        } catch (err) {
          console.error("‚ùå L·ªói c·∫≠p nh·∫≠t m√¥n h·ªçc:", err);
        }
      }}
    >
      <MenuItem value="tinhoc">Tin h·ªçc</MenuItem>
      <MenuItem value="congnghe">C√¥ng ngh·ªá</MenuItem>
    </Select>
  </FormControl>

  {/* Checkbox Gi√°o vi√™n */}
  <FormControlLabel
    control={
      <Checkbox
        checked={isTeacherChecked || false}
        onChange={(e) => setIsTeacherChecked(e.target.checked)}
      />
    }
    label="Gi√°o vi√™n"
  />
</Stack>


        {/* üßæ B·∫£ng h·ªçc sinh */}
        <TableContainer component={Paper} sx={{ maxHeight: "70vh", overflow: "auto" }}>
          <Table
            stickyHeader
            size="small"
            sx={{
              tableLayout: "fixed",
              minWidth: 800,
              borderCollapse: "collapse",
              "& td, & th": {
                borderRight: "1px solid #e0e0e0", // ‚úÖ ƒê∆∞·ªùng k·∫ª d·ªçc nh·∫°t
                borderBottom: "1px solid #e0e0e0" // Gi·ªØ k·∫ª ngang
              },
              "& th:last-child, & td:last-child": {
                borderRight: "none" // ‚ùå B·ªè ƒë∆∞·ªùng ·ªü c·ªôt cu·ªëi
              }
            }}
          >
            <TableHead>
              <TableRow>
                <TableCell align="center" sx={{ backgroundColor: "#1976d2", color: "white", width: 50, px: 1, whiteSpace: "nowrap" }}>STT</TableCell>
                <TableCell align="center" sx={{ backgroundColor: "#1976d2", color: "white", width: 220, px: 1, whiteSpace: "nowrap" }}>H·ªç v√† t√™n</TableCell>
                {/*<TableCell align="center" sx={{ backgroundColor: "#1976d2", color: "white", width: 70, px: 1, whiteSpace: "nowrap" }}>L·ªöP</TableCell>*/}
                <TableCell align="center" sx={{ backgroundColor: "#1976d2", color: "white", width: 70, px: 1, whiteSpace: "nowrap" }}>ƒêGTX</TableCell>
                <TableCell align="center" sx={{ backgroundColor: "#1976d2", color: "white", width: 70, px: 1, whiteSpace: "nowrap" }}>L√≠ thuy·∫øt</TableCell>
                <TableCell align="center" sx={{ backgroundColor: "#1976d2", color: "white", width: 70, px: 1, whiteSpace: "nowrap" }}>Th·ª±c h√†nh</TableCell>
                <TableCell align="center" sx={{ backgroundColor: "#1976d2", color: "white", width: 70, px: 1, whiteSpace: "nowrap" }}>T·ªïng c·ªông</TableCell>
                <TableCell align="center" sx={{ backgroundColor: "#1976d2", color: "white", width: 70, px: 1, whiteSpace: "nowrap" }}>M·ª©c ƒë·∫°t</TableCell>
                <TableCell align="center" sx={{ backgroundColor: "#1976d2", color: "white", width: 350, px: 1, whiteSpace: "nowrap" }}>Nh·∫≠n x√©t</TableCell>
              </TableRow>
            </TableHead>

            <TableBody>
              {students.map((student, idx) => (
                <TableRow key={student.maDinhDanh} hover>
                  <TableCell align="center" sx={{ px: 1 }}>{student.stt}</TableCell>
                  <TableCell align="left" sx={{ px: 1 }}>{student.hoVaTen}</TableCell>
                  {/*<TableCell align="center" sx={{ px: 1 }}>{selectedClass}</TableCell>*/}

                  {/* ƒêGTX hi·ªÉn th·ªã */}
                  <TableCell align="center" sx={{ px: 1 }}>
                    <Typography variant="body2" sx={{ textAlign: "center" }}>
                      {student.dgtx || ""}
                    </Typography>
                  </TableCell>

                  {/* Tr·∫Øc nghi·ªám */}
                  <TableCell align="center" sx={{ px: 1 }}>
                    <TextField
                      variant="standard"
                      value={student.tracNghiem}
                      onChange={(e) =>
                        handleCellChange(student.maDinhDanh, "tracNghiem", e.target.value)
                      }
                      inputProps={{ style: { textAlign: "center", paddingLeft: 2, paddingRight: 2 } }}
                      id={`tracNghiem-${idx}`}
                      onKeyDown={(e) => handleKeyNavigation(e, idx, "tracNghiem")}
                      InputProps={{
                        disableUnderline: true
                      }}
                    />
                  </TableCell>

                  {/* Th·ª±c h√†nh */}
                  <TableCell align="center" sx={{ px: 1 }}>
                    <TextField
                      variant="standard"
                      value={student.thucHanh}
                      onChange={(e) =>
                        handleCellChange(student.maDinhDanh, "thucHanh", e.target.value)
                      }
                      inputProps={{ style: { textAlign: "center", paddingLeft: 2, paddingRight: 2 } }}
                      id={`thucHanh-${idx}`}
                      onKeyDown={(e) => handleKeyNavigation(e, idx, "thucHanh")}
                      InputProps={{
                        disableUnderline: true
                      }}
                    />
                  </TableCell>

                  {/* T·ªïng c·ªông */}
                  <TableCell
                      align="center"
                      sx={{
                          px: 1,
                          fontWeight: "bold", // ‚úÖ In ƒë·∫≠m
                      }}
                      >
                      {student.tongCong || ""}
                      </TableCell>


                  {/* M·ª©c ƒë·∫°t ƒë∆∞·ª£c */}
                  <TableCell align="center" sx={{ px: 1 }}>
                      <FormControl
                          variant="standard"
                          fullWidth
                          size="small"
                          sx={{
                          "& .MuiSelect-icon": {
                              opacity: 0,
                              transition: "opacity 0.2s ease",
                          },
                          "&:hover .MuiSelect-icon": {
                              opacity: 1,
                          },
                          }}
                      >
                          <Select
                          value={student.xepLoai}
                          onChange={(e) =>
                              handleCellChange(student.maDinhDanh, "xepLoai", e.target.value)
                          }
                          disableUnderline
                          sx={{
                              textAlign: "center",
                              px: 1,
                              "& .MuiSelect-select": {
                              py: 0.5,
                              //fontWeight: "bold",
                              color: student.xepLoai === "C" ? "#d32f2f" : "inherit", // üî¥ Ch·ªâ ƒë·ªè khi l√† "C"
                              },
                          }}
                          >
                          <MenuItem value="T">T</MenuItem>
                          <MenuItem value="H">H</MenuItem>
                          <MenuItem value="C">C</MenuItem>
                          </Select>
                      </FormControl>
                      </TableCell>


                  {/* Nh·∫≠n x√©t */}
                  <TableCell align="left" sx={{ px: 1 }}>
                      <TextField
                          variant="standard"
                          multiline
                          maxRows={4}
                          fullWidth
                          value={student.nhanXet}
                          onChange={(e) =>
                          handleCellChange(student.maDinhDanh, "nhanXet", e.target.value)
                          }
                          id={`nhanXet-${idx}`}
                          onKeyDown={(e) => handleKeyNavigation(e, idx, "nhanXet")}
                          InputProps={{
                          sx: {
                              paddingLeft: 1,
                              paddingRight: 1,
                              fontSize: "14px", // ‚úÖ Gi·∫£m c·ª° ch·ªØ ·ªü ƒë√¢y
                              lineHeight: 1.3,  // (t√πy ch·ªçn) l√†m cho d√≤ng ch·ªØ g·ªçn h∆°n
                          },
                          disableUnderline: true,
                          }}
                      />
                      </TableCell>

                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </Card>
      
      <Snackbar
          open={snackbar.open}
          autoHideDuration={3000} // 3 gi√¢y t·ª± t·∫Øt
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          anchorOrigin={{ vertical: "bottom", horizontal: "right" }} // üëà Xu·∫•t hi·ªán g√≥c d∆∞·ªõi b√™n ph·∫£i
          >
          <Alert
              onClose={() => setSnackbar({ ...snackbar, open: false })}
              severity={snackbar.severity}
              sx={{
              width: "100%",
              boxShadow: 3,
              borderRadius: 2,
              fontSize: "0.9rem",
              }}
          >
              {snackbar.message}
          </Alert>
          </Snackbar>
    </Box>
  );

}
